#######################################################
# function to detect git directory and colorize the branch
#######################################################
function parse_git_branch()
{
if git rev-parse --git-dir >/dev/null 2>&1
then
    gitver="${COLOR_RED} (git::$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p'))${COLOR_DEFAULT}"
else
       return 0
fi
echo -e $gitver
}
# NOTES
#######################################################
#  This goes export PS1="[\[${COLOR_GREEN}\]\u@\h\[${COLOR_DEFAULT}\] \W\$(parse_git_branch)]\\$ "
#  however it's causing me to not be able to backspace across the entire line of text for some reason.
#######################################################


#######################################################
# function to set PS1
#######################################################
function _ps1_prep() {
	## Load runtime variables

	# Check if we're in a git repo
	git rev-parse --git-dir 2>/dev/null > /dev/null
	ps1_git=1

	# Get ssh-agent status
	ssh-add -l 2>/dev/null >/dev/null
	ps1_ssh=$?

	# Get sudo status
	sudo -n /bin/true 2>/dev/null >/dev/null
	ps1_sudo=$?

	## Assemble the prompt

	# Opening bracket
	PS1="["

	# User @ host
	PS1=${PS1}"\u@\h "

	# Current directory
	if [ ${ps1_git} -eq 0 ]
	then
		# Git info
		PS1=${PS1}"`_ps1_git`"
	else
		# Current working dir
		PS1=${PS1}"\W"
	fi

	# Closing bracket
	PS1=${PS1}"]"

	# Shell character($ or #)
	PS1=${PS1}"`_ps1_sc`"

	# Trailing space
	PS1=${PS1}" "

	## Exit

	# Return cleanly
	return 0

	}

# :mode=shellscript:
